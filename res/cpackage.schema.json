{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://raw.githubusercontent.com/PoetaKodu/pacc/main/res/cpackage.schema.json",
	"oneOf": [
		{
			"$ref": "#/definitions/workspace"
		},
		{
			"$ref": "#/definitions/project"
		}
	],
	"defaultSnippets": [
		{
			"label": "Workspace",
			"description": "Creates a new workspace with no projects",
			"body": {
				"name": "${1:WorkspaceName}",
				"projects": [ 
					
				],
				"description": "An empty workspace. Hover mouse over a `projects` field to see what you can do."
			}
		},
		{
			"label": "Single project - application",
			"description": "Creates a single project workspace (application)",
			"body": {
				"name": "${1:AppName}",
				"type": "app",
				"files": "${2:src/Main.cpp}",
				"description": "An application project. Hover mouse over a `type` field to see available fields."
			}
		},
		{
			"label": "Single project - static library",
			"description": "Creates a single project workspace (static library)",
			"body": {
				"name": "${1:LibraryName}",
				"type": "static lib",
				"includeFolders": {
					"public": "include"
				},
				"files": [
					"include/${1}/**.hpp",
					"${2:src/Main.cpp}"
				],
				"description": "A static library project. Hover mouse over a `type` field to see available fields."
			}
		},
		{
			"label": "Single project - shared library",
			"description": "Creates a single project workspace (shared library)",
			"body": {
				"name": "${1:LibraryName}",
				"type": "shared lib",
				"includeFolders": {
					"public": "include"
				},
				"files": [
					"include/${1}/**.hpp",
					"${2:src/Main.cpp}"
				],
				"description": "A shared library project. Hover mouse over a `type` field to see available fields."
			}
		},
		{
			"label": "Single project - interface",
			"description": "Creates a workspace with an interface project (which acts like a config provider)",
			"body": {
				"name": "${1:LibraryName}",
				"type": "interface",
				"defines": {
					"interface": "MY_DEFINE=123"
				},
				"description": "An interface project. Hover mouse over a `type` field to see available fields."
			}
		}
	],
	"additionalProperties": true,
	"definitions": {
		"workspace": {
			"type": ["object", "array"],
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"description": "Workspace name\nUse only characters available in file names.\nFirst project's name will be used if not specified.",
					"markdownDescription": "# Workspace name\n\nUse only characters available in file names.\nFirst project's name will be used if not specified."
				},
				"projects": {
					"type": "array",
					"description": "List of projects belonging to the workspace",
					"$ref": "#/definitions/hasArrayOfProjects"
				},
				"type": false
			},
			"required": ["projects"],
			"minItems": 1,
			"items": {
				"$ref": "#/definitions/project"
			}
		},
		"project": {
			"type": "object",
			"additionalProperties": true,
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"description": "Project name\nUse only characters available in file names.",
					"markdownDescription": "# Project name\n\nUse only characters available in file names.\nThis name will be used by default as an output name and for intermediate files when building this project.\nYou can set custom output name as follows:\n```json\n\"outputName\": \"CustomOutputName\"\n```\n**Note:** omit file extension (f.e. `.exe`)"
				},
				"type": {
					"type": "string",
					"description": "Type of the project (causes different build results)",
					"markdownDescription": "# Project type\n\nDetermines what `pacc` should do with this project, affects build results.\n\nAvailable project types:\n- `app`  \nan executable application (EXE on Windows systems);\n- `static lib`  \na library that is compiled into binaries while linking (integrated into one file, bigger file sizes)\n- `shared lib`  \na standalone library (sharable between binaries);\n- `interface`  \na project that doesn't result in a binary itself, instead it provides configuration to other projects.",
					"oneOf": [
						{
							"enum": ["app"]
						},
						{
							"enum": ["static lib"]
						},
						{
							"enum": ["shared lib"]
						},
						{
							"enum": ["interface"]
						}
					]
				},
				"language": {
					"type": "string",
					"description": "Language version (default: C++17)",
					"oneOf": [
						{"enum": ["C89"], 			"title": "C (standard: C89)"},
						{"enum": ["C90"], 			"title": "C (standard: C90)"},
						{"enum": ["C95"], 			"title": "C (standard: C95)"},
						{"enum": ["C99"], 			"title": "C (standard: C99)"},
						{"enum": ["C11"], 			"title": "C (standard: C11)"},
						{"enum": ["C17"], 			"title": "C (standard: C17)"},
						{"enum": ["C++98"], 		"title": "C++ (standard: C++98)"},
						{"enum": ["C++0x"], 		"title": "C++ (standard: C++0x - the prepublish version of C++11)"},
						{"enum": ["C++11"], 		"title": "C++ (standard: C++11)"},
						{"enum": ["C++1y"], 		"title": "C++ (standard: C++1y - the prepublish version of C++14)"},
						{"enum": ["C++14"], 		"title": "C++ (standard: C++14)"},
						{"enum": ["C++1z"], 		"title": "C++ (standard: C++1z - the prepublish version of C++17)"},
						{"enum": ["C++17"], 		"title": "C++ (standard: C++17)"}
					]
				},
				"files": {
					"$ref": "#/definitions/stringOrVec",
					"description": "Files that this project uses.\nEither a single file, a file pattern or array of files/file patterns.\nA file pattern uses asterisk as a wildcard, f.e.: \"src/*.cpp\".\nA double wildcard will search subfolders too: \"src/**.cpp\".\nMore examples:\n\"files\": [ \"src/Hello.hpp\", \"src/Hello.cpp\", \"src/Main.cpp\" ]\n\"files\": [ \"src1/*.cpp\", \"src2/*.cpp\" ]",
					"markdownDescription": "# Project files\n\nFiles used to build a project. Should contain both header and source files.\n\nEither a single file, a file pattern or an array of files/file patterns. A file pattern uses asterisk as a wildcard.\n\n## Examples\n\nEvery `.cpp` file directly inside `src/` folder:\n```json\n\"files\": \"src/*.cpp\"\n```\n\nA double wildcard will search subfolders too:\n```json\n\"files\": \"src/**.cpp\"\n```\n\nSpecifying multiple files/patterns:\n```json\n\"files\": [\n    \"src/Hello.hpp\",\n    \"src/Hello.cpp\",\n    \"src/Main.cpp\"\n]\n```\nEvery `.cpp` file inside `src1/` and `src2/`:\n\n```json\n\"files\": [\n    \"src1/*.cpp\",\n    \"src2/*.cpp\"\n]\n```"
				},
				"pch": {
					"type": "object",
					"properties": {

						"header": {
							"type": "string",
							"minLength": 1,
							"description": "Path to the precompiled header, for example:\n\"header\": \"include/MyLib/MyLibPCH.hpp\"\nWe recommend to put header file inside include/ProjectName folder, with following name: ProjectNamePCH.hpp.",
							"markdownDescription": "Path to the precompiled header, for example:\n\n```json\n\"header\": \"include/MyLib/MyLibPCH.hpp\"\n```\nWe recommend to put header file inside `include/ProjectName` folder, with following name: `ProjectNamePCH.hpp`."
						},
						"source": {
							"type": "string",
							"minLength": 1,
							"description": "Path to the source file used by precompiled header for generation, for example:\n\"source\": \"src/MyLibPCH.cpp\"\nWe recommend to put source file inside src folder, with following name: ProjectNamePCH.cpp.",
							"markdownDescription": "Path to the source file used by precompiled header for generation, for example:\n\n```json\n\"source\": \"src/MyLibPCH.cpp\"\n```\nWe recommend to put source file inside `src` folder, with following name: `ProjectNamePCH.cpp`."
						},
						"definition": {
							"type": "string",
							"minLength": 1,
							"description": "Macro definition used for convenient PCH usage, for example:\n\"definition\": \"PROJECTNAME_PCH\"\nPrecompiled header has to be included at the very beginning of every source (.cpp) file of the project.\nThe definition allows you to do it easily.\nFor example, your Source.cpp should look like this:\n\n#include PROJECTNAME_PCH\n\n// <rest of your code>\n\nThis way of PCH inclusion can be also used in header files.",
							"markdownDescription": "Macro definition used for convenient PCH usage, for example:\n\n```json\n\"definition\": \"PROJECTNAME_PCH\"\n```\nPrecompiled header **has to be included at the very beginning** of every source (`.cpp`) file of the project.\nThe definition allows you to do it easily.\nFor example, your `Source.cpp` should look like this:\n\n```cpp\n#include PROJECTNAME_PCH\n\n// <rest of your code>\n```\nThis way of PCH inclusion can be also used in header files."
						}

					},
					"required": [ "header", "source", "definition" ],
					"description": "Precompiled headers (PCH)\n\nThey are used to significantly speed up compilation times.\nCommon header files are included in the PCH once, precompiled and then reused in every other source file.\nWhen using PCHs, every source file (.cpp) has to include the PCH at the very beginning of the file.\nPCH use a single additional source file to compile itself.\nTo use PCH's conveniently, PACC adds a macrodefinition that can be used with #include THE_PCH_MACRO. We recommend you to use following name for the macro: PROJECTNAME_PCH.\nWhen defining precompiled header, PACC requires you to specify following fields:\n- header - the PCH file containing commonly used headers\n- source - source file used by the PCH for compilation\n- definition - macrodefinition used for convenient usage of PCHs\n\n\nExamples\n\nPrecompiled header (include/ProjectName/ProjectNamePCH.hpp) content:\n\n#pragma once\n\n#include <iostream>\n#include <fstream>\n#include <filesystem>\n#include <cstdlib>\n#include <vector>\n#include <string>\n\n// TODO: include other commonly used files here.\n// Note: include only files that rarely change their contents\n\nPCH source file (src/ProjectNamePCH.cpp) contents:\n\n#include PROJECTNAME_PCH // uses the macrodefinition\n\n// Note: do not edit this file! It is used for PCH compilation\n\nThen you can use the PCH in any other project file (source or header).\nFor example, SomeFile.cpp contents:\n\n#include PROJECTNAME_PCH // THIS HAS TO BE AT THE VERY BEGINNING\n\nvoid sayHello()\n{\n// cout is visible here, because <iostream> was added inside PCH\nstd::cout << \"Hello, World\";\n}\n",
					"markdownDescription": "# Precompiled headers (*PCH*)\n\nThey are used to significantly speed up compilation times.\n\nCommon header files are included in the PCH once, precompiled and then reused in every other source file.\n\n**When using PCHs, every source file (`.cpp`) has to include the PCH at the very beginning of the file.**\n\nPCH use a single additional source file to compile itself.\n\nTo use PCH's conveniently, PACC adds a macrodefinition that can be used with `#include THE_PCH_MACRO`. We recommend you to use following name for the macro: `PROJECTNAME_PCH`.\n\n\nWhen defining precompiled header, PACC requires you to specify following fields:\n- `header` - the PCH file containing commonly used headers\n- `source` - source file used by the PCH for compilation\n- `definition` - macrodefinition used for convenient usage of PCHs\n\n## Examples\n\nPrecompiled header (`include/ProjectName/ProjectNamePCH.hpp`) content:\n\n<hr/>\n\n```cpp\n#pragma once\n\n#include <iostream>\n#include <fstream>\n#include <filesystem>\n#include <cstdlib>\n#include <vector>\n#include <string>\n\n// TODO: include other commonly used files here.\n// Note: include only files that rarely change their contents\n\n```\n\n<hr/>\n\nPCH source file (`src/ProjectNamePCH.cpp`) contents:\n\n<hr/>\n\n```cpp\n#include PROJECTNAME_PCH // uses the macrodefinition\n\n// Note: do not edit this file! It is used for PCH compilation\n\n```\n\n<hr/>\n\nThen you can use the PCH in any other project file (source or header).\nFor example, `SomeFile.cpp` contents:\n\n<hr/>\n\n```cpp\n#include PROJECTNAME_PCH // THIS HAS TO BE AT THE VERY BEGINNING\n\nvoid sayHello()\n{\n\t// cout is visible here, because <iostream> was added inside PCH\n\tstd::cout << \"Hello, World\";\n}\n```",
					"defaultSnippets": [
						{
							"label": "Add precompiled header",
							"body": {
								"header": "include/${1:ProjectName}/${1}PCH.hpp",
								"source": "src/${1}PCH.cpp",
								"definition": "${1/(.*)/${1:/upcase}/}_PCH"
							}
						}
					]
				},
				"dependencies": {
					"description": "Projects within packages that this project depends on.\nThis field can be specified in several ways (see Examples)\nIt consists of three subfields:\n- private - values will be used only by the project itself\n- public - values will be used by the project and propagated to projects that use this one as a dependency\n- interface - values used only by projects that use this one as a dependency\nExamples:\nYou don't have to specify each subfield.\nSingle private file dependency:\n\"dependencies\": [\"opengl32\"]\nSingle private package dependency:\n\"defines\": \"SOME_DEFINITION=123\"\n\nMultiple private definitions:\n\"defines\": [\n\"FOO\",\n\"ABCDEF=123\"\n\"BAR=999\"\n]\n\nExplicitly defined public, private and interface fields:\n\"defines\": {\n\"public\": [ \"FOO_STATIC_LIBS\", \"NOMINMAX\" ],\n\"private\": \"ABC=123\",\n\"interface\": \"USES_FOO_LIBRARY\"\n}",
					"markdownDescription": "# Dependencies\n\nProjects within packages that this project depends on.\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle private file dependency:\n```json\n\"dependencies\": [\"opengl32\"]\n```\n\nSingle private **package** dependency (linking two projects):\n```json\n\"dependencies\": [\n\t{\n\t\t\"name\": \"MyCustomPackage\",\n\t\t\"projects\": [ \"PackageLib1\", \"PackageLib2\" ],\n\t\t\"version\": \"^0.3.2\"\n\t}\n]\n```\n\n**Note:** make sure that `MyCustomPackage` is [*installed*](https://github.com/PoetaKodu/pacc/tree/main/docs/Action-Install.md) or [*linked*](https://github.com/PoetaKodu/pacc/tree/main/docs/Action-Link.md).\n\nPackage linking is useful when working on local package versions.",
					"oneOf": [
						{
							"type": "object",
							"properties": {
								"public": {
									"$ref": "#/definitions/arrayOfDeps",
									"decription": "Dependencies of the current project and propagated to projects that use it as a dependency."
								},
								"private": {
									"$ref": "#/definitions/arrayOfDeps",
									"decription": "Dependencies of the current project only."
								},
								"interface": {
									"$ref": "#/definitions/arrayOfDeps",
									"decription": "Dependencies propagated to projects that use the current project as a dependency."
								}
							}
						},
						{
							"$ref": "#/definitions/arrayOfDeps"
						}
					]
				},
				"linkedLibraries": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Linked libraries\nThis field can be specified in several ways (see Examples)\nIt consists of three subfields:\n\n- private - values will be used only by the project itself\n- public - values will be used by the project and propagated to projects that use this one as a dependency\n- interface - values used only by projects that use this one as a dependency\nExamples\nLinking specific file within private section (.a, .lib, etc.):\n\"linkedLibraries\": \"myLibrary\"\nLinking library LibName from package PackageName within private section (package must be set inside dependencies field):\n\"linkedLibraries\": \"PackageName:LibName\"\nMultiple private linkings:\n\"linkedLibraries\": [\n\"opengl32\",\n\"fmtlib:fmt\"\n\"mylib\"\n]\n\nExplicitly defined public, private and interface fields:\n\"linkedLibraries\": {\n\"public\": [ \"glu32\", \"openal32\", \"opengl32\" ],\n\"private\": \"my_private_lib\",\n\"interface\": \"sfml-graphics\"\n}\n",
					"markdownDescription": "# Linked libraries\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nLinking specific file within `private` section (`.a`, `.lib`, etc.):\n\n```json\n\"linkedLibraries\": \"myLibrary\"\n```\n\nLinking library `LibName` from package `PackageName` within `private` section (package must be set inside `dependencies` field):\n\n```json\n\"linkedLibraries\": \"PackageName:LibName\"\n```\n\nMultiple `private` linkings:\n```json\n\"linkedLibraries\": [\n    \"opengl32\",\n    \"fmtlib:fmt\"\n    \"mylib\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"linkedLibraries\": {\n    \"public\": [ \"glu32\", \"openal32\", \"opengl32\" ],\n    \"private\": \"my_private_lib\",\n    \"interface\": \"sfml-graphics\"\n}\n```"
				},
				"defines": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Preprocessor definitions\nThis field can be specified in several ways (see Examples)\nIt consists of three subfields:\n- private - values will be used only by the project itself\n- public - values will be used by the project and propagated to projects that use this one as a dependency\n- interface - values used only by projects that use this one as a dependency\nExamples:\nYou don't have to specify each subfield.\nSingle definition without a value (goes to private section):\n\"defines\": \"SOME_DEFINITION\"\nSingle definition with a value (goes to private section):\n\"defines\": \"SOME_DEFINITION=123\"\n\nMultiple private definitions:\n\"defines\": [\n\"FOO\",\n\"ABCDEF=123\"\n\"BAR=999\"\n]\n\nExplicitly defined public, private and interface fields:\n\"defines\": {\n\"public\": [ \"FOO_STATIC_LIBS\", \"NOMINMAX\" ],\n\"private\": \"ABC=123\",\n\"interface\": \"USES_FOO_LIBRARY\"\n}",
					"markdownDescription": "# Preprocessor definitions\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle definition without a value (goes to `private` section):\n```json\n\"defines\": \"SOME_DEFINITION\"\n```\n\nSingle definition with a value (goes to `private` section):\n```json\n\"defines\": \"SOME_DEFINITION=123\"\n```\n\nMultiple `private` definitions:\n```json\n\"defines\": [\n    \"FOO\",\n    \"ABCDEF=123\"\n    \"BAR=999\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"defines\": {\n    \"public\": [ \"FOO_STATIC_LIBS\", \"NOMINMAX\" ],\n    \"private\": \"ABC=123\",\n    \"interface\": \"USES_FOO_LIBRARY\"\n}\n```"
				},
				"includeFolders": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Folders used by the compiler to locate project files.\nThis is a structure of three values: public, private and interface.\nWhen using string or array to define this field, values will be considered as public.",
					"markdownDescription": "# Include directories\n\nFolders used by the preprocessor to locate files with `#include` directive:\n\n```cpp\n#include <file_name>\n```\n\nEach path is relative to package directory (folder in which `cpackage.json` is located).\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle include folder (goes to `private` section):\n```json\n\"includeFolders\": \"/path/to/library/include\"\n```\n\nMultiple `private` includes:\n```json\n\"includeFolders\": [\n    \"include\",\n    \"/path/to/library/include\"\n    \"/path/to/other/library/include\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"includeFolders\": {\n    \"public\": [ \"include\", \"path/to/other/library/include\" ],\n    \"private\": \"priv/include\",\n    \"interface\": \"/path/to/some/library/include\"\n}\n```"
				},
				"linkerFolders": {
					"$ref": "#/definitions/stringOrVecAcc",
					"markdownDescription": "# Library directories\n\nFolders used by the linker to locate library binaries. \n\nEach path is relative to package directory (folder in which `cpackage.json` is located).\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle linker folder (goes to `private` section):\n```json\n\"linkerFolders\": \"/path/to/library/bin\"\n```\n\nMultiple `private` linker folders:\n```json\n\"linkerFolders\": [\n    \"bin\",\n    \"/path/to/library/lib\"\n    \"/path/to/other/library/bin\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"linkerFolders\": {\n    \"public\": [ \"bin\", \"path/to/other/library/bin\" ],\n    \"private\": \"priv/bin\",\n    \"interface\": \"/path/to/some/library/bin\"\n}\n```"
				},
				"projects": false
			},
			"required": [ "name", "type" ]
		},
		"stringOrVec": {
			"type": [ "array", "string" ],
			"minLength": 1,
			"items": {
				"type": "string",
				"minLength": 1
			}
		},
		"stringOrVecAcc": {
			"type": [ "array", "object", "string" ],
			"minLength": 1,
			"items": {
				"type": "string",
				"minLength": 1
			},
			"properties": {
				"public": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values used by the current project and propagated to projects that use it as a dependency."
				},
				"private": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values used by the current project only."
				},
				"interface": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values propagated to projects that use the current project as a dependency."
				}
			}
		},
		"hasArrayOfProjects": {
			"items": {
				"$ref": "#/definitions/project",
				"defaultSnippets": [
					{
						"label": "Application project",
						"description": "Adds an application project to the workspace",
						"body": {
							"name": "${1:AppName}",
							"type": "app",
							"files": "${2:src/Main.cpp}",
							"description": "An application project. Hover mouse over a `type` field to see available fields."
						}
					},
					{
						"label": "Static library project",
						"description": "Adds a static library project to the workspace",
						"body": {
							"name": "${1:LibraryName}",
							"type": "static lib",
							"includeFolders": {
								"public": "include"
							},
							"files": [
								"include/${1}/**.hpp",
								"${2:src/**.cpp}"
							],
							"description": "A static library project. Hover mouse over a `type` field to see available fields."
						}
					},
					{
						"label": "Shared library project",
						"description": "Adds a shared library project to the workspace",
						"body": {
							"name": "${1:LibraryName}",
							"type": "shared lib",
							"includeFolders": {
								"public": "include"
							},
							"files": [
								"include/${1}/**.hpp",
								"${2:src/Main.cpp}"
							],
							"description": "A shared library project. Hover mouse over a `type` field to see available fields."
						}
					},
					{
						"label": "Interface project",
						"description": "Adds an interface project to the workspace",
						"body": {
							"name": "${1:LibraryName}",
							"type": "interface",
							"defines": {
								"interface": "MY_DEFINE=123"
							},
							"description": "An interface project. Hover mouse over a `type` field to see available fields."
						}
					}
				]
			}
		},
		"arrayOfDeps": {
			"type": "array",
			"items": {
				"type": [ "object", "string" ],
				"minLength": "1",
				"properties": {
					"name": {
						"type": "string",
						"description": "File or package name",
						"markdownDescription": "File or package name"
					},
					"projects": {
						"$ref": "#/definitions/stringOrVec"
					},
					"version": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"required": [ "name", "projects" ],
				"defaultSnippets": [
					{
						"label": "Pacc dependency",
						"description": "Dependency loaded from pacc repository.",
						"markdownDescription": "Dependency loaded from `pacc` repository.",
						"body": {
							"name": "${1:PackageName}",
							"projects": [ "${2:ProjectName}" ],
							"version": "${3:^1.0.0}"
						}
					},
					{
						"label": "Local dependency",
						"description": "Dependency loaded from local disk.",
						"body": {
							"name": "${1:PackageName}",
							"projects": [ "${2:ProjectName}" ],
							"version": "${3:^1.0.0}",
							"path": "${4:/path/to/folder/with/cpackage.json_or_lua}"
						}
					}
				]
			}
		}
	}
}