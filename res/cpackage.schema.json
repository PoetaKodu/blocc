{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://raw.githubusercontent.com/PoetaKodu/blocc/main/res/cpackage.schema.json",
	"oneOf": [
		{
			"$ref": "#/definitions/workspace"
		},
		{
			"$ref": "#/definitions/project"
		}
	],
	"additionalProperties": true,
	"definitions": {
		"workspace": {
			"type": ["object", "array"],
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"description": "Name of the workspace. First project's name will be used if not specified."
				},
				"projects": {
					"type": "array",
					"description": "List of projects belonging to the workspace",
					"items": { "$ref": "#/definitions/project" }
				},
				"type": false
			},
			"required": ["projects"],
			"minItems": 1,
			"items": { "$ref": "#/definitions/project" }
		},
		"project": {
			"type": "object",
			"additionalProperties": true,
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"description": "Name of the project. Use only characters allowed in file names."
				},
				"type": {
					"type": "string",
					"description": "Type of the project (causes different build results)",
					"oneOf": [
						{"enum": ["app"], 			"title": "An executable application (EXE on Windows systems)."},
						{"enum": ["static lib"], 	"title": "A library that is compiled into binaries while linking (integrated into one file, bigger file sizes)."},
						{"enum": ["shared lib"], 	"title": "A standalone library (sharable between binaries)."},
						{"enum": ["interface"], 	"title": "A project that doesn't result in a binary itself, instead it provides configuration to other projects."}
					]
				},
				"language": {
					"type": "string",
					"description": "Language version (default: C++17)",
					"oneOf": [
						{"enum": ["C89"], 			"title": "C (standard: C89)"},
						{"enum": ["C90"], 			"title": "C (standard: C90)"},
						{"enum": ["C95"], 			"title": "C (standard: C95)"},
						{"enum": ["C99"], 			"title": "C (standard: C99)"},
						{"enum": ["C11"], 			"title": "C (standard: C11)"},
						{"enum": ["C17"], 			"title": "C (standard: C17)"},
						{"enum": ["C++98"], 		"title": "C++ (standard: C++98)"},
						{"enum": ["C++0x"], 		"title": "C++ (standard: C++0x - the prepublish version of C++11)"},
						{"enum": ["C++11"], 		"title": "C++ (standard: C++11)"},
						{"enum": ["C++1y"], 		"title": "C++ (standard: C++1y - the prepublish version of C++14)"},
						{"enum": ["C++14"], 		"title": "C++ (standard: C++14)"},
						{"enum": ["C++1z"], 		"title": "C++ (standard: C++1z - the prepublish version of C++17)"},
						{"enum": ["C++17"], 		"title": "C++ (standard: C++17)"}
					]
				},
				"files": {
					"$ref": "#/definitions/stringOrVec",
					"description": "Files that this project uses.\nEither a single file, a file pattern or array of files/file patterns.\nA file pattern uses asterisk as a wildcard, f.e.: \"src/*.cpp\".\nA double wildcard will search subfolders too: \"src/**.cpp\".\nMore examples:\n\"files\": [ \"src/Hello.hpp\", \"src/Hello.cpp\", \"src/Main.cpp\" ]\n\"files\": [ \"src1/*.cpp\", \"src2/*.cpp\" ]",
					"markdownDescription": "# Project files\n\nFiles used to build a project. Should contain both header and source files.\n\nEither a single file, a file pattern or an array of files/file patterns. A file pattern uses asterisk as a wildcard.\n\n## Examples\n\nEvery `.cpp` file directly inside `src/` folder:\n```json\n\"files\": \"src/*.cpp\"\n```\n\nA double wildcard will search subfolders too:\n```json\n\"files\": \"src/**.cpp\"\n```\n\nSpecifying multiple files/patterns:\n```json\n\"files\": [\n    \"src/Hello.hpp\",\n    \"src/Hello.cpp\",\n    \"src/Main.cpp\"\n]\n```\nEvery `.cpp` file inside `src1/` and `src2/`:\n\n```json\n\"files\": [\n    \"src1/*.cpp\",\n    \"src2/*.cpp\"\n]\n```"
				},
				"linkedLibraries": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Linked libraries\nThis field can be specified in several ways (see Examples)\nIt consists of three subfields:\n\n- private - values will be used only by the project itself\n- public - values will be used by the project and propagated to projects that use this one as a dependency\n- interface - values used only by projects that use this one as a dependency\nExamples\nLinking specific file within private section (.a, .lib, etc.):\n\"linkedLibraries\": \"myLibrary\"\nLinking library LibName from package PackageName within private section (package must be set inside dependencies field):\n\"linkedLibraries\": \"PackageName:LibName\"\nMultiple private linkings:\n\"linkedLibraries\": [\n\"opengl32\",\n\"fmtlib:fmt\"\n\"mylib\"\n]\n\nExplicitly defined public, private and interface fields:\n\"linkedLibraries\": {\n\"public\": [ \"glu32\", \"openal32\", \"opengl32\" ],\n\"private\": \"my_private_lib\",\n\"interface\": \"sfml-graphics\"\n}\n",
					"markdownDescription": "# Linked libraries\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nLinking specific file within `private` section (`.a`, `.lib`, etc.):\n\n```json\n\"linkedLibraries\": \"myLibrary\"\n```\n\nLinking library `LibName` from package `PackageName` within `private` section (package must be set inside `dependencies` field):\n\n```json\n\"linkedLibraries\": \"PackageName:LibName\"\n```\n\nMultiple `private` linkings:\n```json\n\"linkedLibraries\": [\n    \"opengl32\",\n    \"fmtlib:fmt\"\n    \"mylib\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"linkedLibraries\": {\n    \"public\": [ \"glu32\", \"openal32\", \"opengl32\" ],\n    \"private\": \"my_private_lib\",\n    \"interface\": \"sfml-graphics\"\n}\n```"
				},
				"defines": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Preprocessor definitions\nThis field can be specified in several ways (see Examples)\nIt consists of three subfields:\n- private - values will be used only by the project itself\n- public - values will be used by the project and propagated to projects that use this one as a dependency\n- interface - values used only by projects that use this one as a dependency\nExamples:\nYou don't have to specify each subfield.\nSingle definition without a value (goes to private section):\n\"defines\": \"SOME_DEFINITION\"\nSingle definition with a value (goes to private section):\n\"defines\": \"SOME_DEFINITION=123\"\n\nMultiple private definitions:\n\"defines\": [\n\"FOO\",\n\"ABCDEF=123\"\n\"BAR=999\"\n]\n\nExplicitly defined public, private and interface fields:\n\"defines\": {\n\"public\": [ \"FOO_STATIC_LIBS\", \"NOMINMAX\" ],\n\"private\": \"ABC=123\",\n\"interface\": \"USES_FOO_LIBRARY\"\n}",
					"markdownDescription": "# Preprocessor definitions\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle definition without a value (goes to `private` section):\n```json\n\"defines\": \"SOME_DEFINITION\"\n```\n\nSingle definition with a value (goes to `private` section):\n```json\n\"defines\": \"SOME_DEFINITION=123\"\n```\n\nMultiple `private` definitions:\n```json\n\"defines\": [\n    \"FOO\",\n    \"ABCDEF=123\"\n    \"BAR=999\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"defines\": {\n    \"public\": [ \"FOO_STATIC_LIBS\", \"NOMINMAX\" ],\n    \"private\": \"ABC=123\",\n    \"interface\": \"USES_FOO_LIBRARY\"\n}\n```"
				},
				"includeFolders": {
					"$ref": "#/definitions/stringOrVecAcc",
					"description": "Folders used by the compiler to locate project files.\nThis is a structure of three values: public, private and interface.\nWhen using string or array to define this field, values will be considered as public.",
					"markdownDescription": "# Include directories\n\nFolders used by the preprocessor to locate files with `#include` directive:\n\n```cpp\n#include <file_name>\n```\n\nEach path is relative to package directory (folder in which `cpackage.json` is located).\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle include folder (goes to `private` section):\n```json\n\"includeFolders\": \"/path/to/library/include\"\n```\n\nMultiple `private` includes:\n```json\n\"includeFolders\": [\n    \"include\",\n    \"/path/to/library/include\"\n    \"/path/to/other/library/include\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"includeFolders\": {\n    \"public\": [ \"include\", \"path/to/other/library/include\" ],\n    \"private\": \"priv/include\",\n    \"interface\": \"/path/to/some/library/include\"\n}\n```"
				},
				"linkerFolders": {
					"$ref": "#/definitions/stringOrVecAcc",
					"markdownDescription": "# Library directories\n\nFolders used by the linker to locate library binaries. \n\nEach path is relative to package directory (folder in which `cpackage.json` is located).\n\nThis field can be specified in several ways (see Examples)\n\nIt consists of three subfields:\n\n- `private` - values will be used only by the project itself\n- `public` - values will be used by the project and propagated to projects that use this one as a dependency\n- `interface` - values used only by projects that use this one as a dependency\n\n## Examples\n\nYou don't have to specify each subfield.\n\nSingle linker folder (goes to `private` section):\n```json\n\"linkerFolders\": \"/path/to/library/bin\"\n```\n\nMultiple `private` linker folders:\n```json\n\"linkerFolders\": [\n    \"bin\",\n    \"/path/to/library/lib\"\n    \"/path/to/other/library/bin\"\n]\n```\n\nExplicitly defined `public`, `private` and `interface` fields:\n```json\n\"linkerFolders\": {\n    \"public\": [ \"bin\", \"path/to/other/library/bin\" ],\n    \"private\": \"priv/bin\",\n    \"interface\": \"/path/to/some/library/bin\"\n}\n```"
				},
				"projects": false
			},
			"required": [ "name", "type" ]
		},
		"stringOrVec": {
			"type": [ "array", "string" ],
			"minLength": 1,
			"items": {
				"type": "string",
				"minLength": 1
			}
		},
		"stringOrVecAcc": {
			"type": [ "array", "object", "string" ],
			"minLength": 1,
			"items": {
				"type": "string",
				"minLength": 1
			},
			"properties": {
				"public": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values used by the current project and propagated to projects that use it as a dependency."
				},
				"private": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values used by the current project only."
				},
				"interface": {
					"$ref": "#/definitions/stringOrVec",
					"decription": "Values propagated to projects that use the current project as a dependency."
				}
			}
		}
	}
}